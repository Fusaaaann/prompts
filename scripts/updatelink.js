const github = require('@actions/github');
const { graphql } = require("@octokit/graphql");






function replaceOrAppend(text, pattern, newtext) {
  const regex = new RegExp(pattern, 'g');

  if (regex.test(text)) {
    // If the pattern exists, replace it with the newtext
    return text.replace(regex, newtext);
  } else {
    // If the pattern doesn't exist, append the newtext to the end of the text
    return text + newtext;
  }
}

function fetchUntilLastNewline(text) {
  const lastNewlineIndex = text.lastIndexOf('\n');
  const endIndex = lastNewlineIndex >= 0 ? lastNewlineIndex : -1;

  if (endIndex === -1) {
    return text;
  }

  return text.substring(0, endIndex);
}

function fetchAfterLastNewline(text) {
  const lastNewlineIndex = text.lastIndexOf('\n') > 0 ? text.lastIndexOf('\n') : text.length;

  return text.substring(lastNewlineIndex + 1);
}

const updateLink = (content, push_hash, node_id,is_comment) => {
  // TODO: include branch for comment
  const new_url = `https://github.com/Fusaaaann/prompts/blob/${push_hash}/prompts/${node_id}`

  // Define the regular expression
  const regex = /\[Code Location\]\((https?:\/\/[\S]+)\)\(generated by bot\)$/g;

  // Replace the URL with a new one in the text after the last newline
  const newTextAfterReplacement = fetchUntilLastNewline(content) + replaceOrAppend(
    fetchAfterLastNewline(content),
    regex,
    `[Code Location](${new_url})(generated by bot)`
  );
  const graphqlWithAuth = graphql.defaults({
    headers: {
      authorization: `token ${process.env.DISCUSSION_TOK}`,
    },
  });
  if (is_comment === 0) {
    await graphqlWithAuth(`
      mutation {
        updateDiscussion {
          discussionId:${node_id}
          body: ${newTextAfterReplacement}
        }
      }
    `);
  }
  else {
    await graphqlWithAuth(`
    mutation {
      updateDiscussionComment {
        commentId:${node_id}
        body: ${newTextAfterReplacement}
      }
    }
    `);
  }

}
updateLink(process.argv[2], process.argv[3], process.argv[4], Number(process.argv[5]))